if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif()


find_package(CUDA 7.0 REQUIRED)
include_directories(${CUDA_TOOLKIT_INCLUDE})


# Append additional CMake module scripts.
list(APPEND CMAKE_MODULE_PATH
     @CMAKE_INSTALL_PREFIX@/share/DO_Shakti/cmake)

# Load DO-specific macros
include(shakti_configure_cxx_compiler)
include(shakti_macros)
include(shakti_version)



# ============================================================================ #
# Debug message.
shakti_step_message("'DO_ShaktiConfig.cmake' running for project '${PROJECT_NAME}'")



# ============================================================================ #
# 'find_package(DO_Shakti COMPONENTS Core Graphics ... REQUIRED)' is called.
set (DO_Shakti_ALL_COMPONENTS ImageProcessing MultiArray Utilities Segmentation)

if (NOT DO_Shakti_FIND_COMPONENTS)
  set(DO_Shakti_USE_COMPONENTS ${DO_Shakti_ALL_COMPONENTS})
else ()
  set(DO_Shakti_USE_COMPONENTS "")
  foreach (component ${DO_Shakti_FIND_COMPONENTS})
    list(FIND DO_Shakti_COMPONENTS ${component} COMPONENT_INDEX)
    if (COMPONENT_INDEX EQUAL -1)
      message (FATAL_ERROR "[Shakti] ${component} does not exist!")
    else ()
      list (APPEND DO_Shakti_USE_COMPONENTS ${component})
    endif ()
  endforeach (component)
endif ()



# ============================================================================ #
# Find include directories.
#
find_path(DO_Shakti_INCLUDE_DIRS
  NAMES DO/Shakti.hpp
  PATHS @CMAKE_INSTALL_PREFIX@
        "C:/Program Files/DO-Shakti"
  PATH_SUFFIXES include)



# ============================================================================ #
# Find compiled component libraries.
#
# First remove header-only libraries.
list (REMOVE_ITEM DO_Shakti_USE_COMPONENTS "MultiArray")

# Initialize the list of compiled component libraries we want to use.
set(DO_Shakti_LIBRARIES "")

# Find the specific component libraries.
foreach (COMPONENT ${DO_Shakti_USE_COMPONENTS})

  if (SHAKTI_USE_STATIC_LIBS)
    set (_library_name "DO_Shakti_${COMPONENT}-s")
    set (_library_name_debug "DO_Shakti_${COMPONENT}-sd")
  else ()
    set (_library_name "DO_Shakti_${COMPONENT}")
    set (_library_name_debug "DO_Shakti_${COMPONENT}-d")
  endif ()

  find_library(DO_Shakti_${COMPONENT}_DEBUG_LIBRARIES
    NAMES ${_library_name_debug}
    PATHS @CMAKE_INSTALL_PREFIX@
          "C:/Program Files/DO-Shakti-Debug"
    PATH_SUFFIXES lib)

  find_library(DO_Shakti_${COMPONENT}_RELEASE_LIBRARIES
    NAMES ${_library_name}
    PATHS @CMAKE_INSTALL_PREFIX@
          "C:/Program Files/DO-Shakti"
    PATH_SUFFIXES lib)

  if (NOT SHAKTI_USE_STATIC_LIBS AND NOT DO_Shakti_${COMPONENT}_DEBUG_LIBRARIES)
    set(DO_Shakti_${COMPONENT}_LIBRARIES
      ${DO_Shakti_${COMPONENT}_RELEASE_LIBRARIES}
      CACHE STRING "")
  else ()
    set(DO_Shakti_${COMPONENT}_LIBRARIES
      debug ${DO_Shakti_${COMPONENT}_DEBUG_LIBRARIES}
      optimized ${DO_Shakti_${COMPONENT}_RELEASE_LIBRARIES}
      CACHE STRING "")
  endif ()

  if (SHAKTI_USE_STATIC_LIBS)
    if (NOT DO_Shakti_${COMPONENT}_DEBUG_LIBRARIES OR
        NOT DO_Shakti_${COMPONENT}_RELEASE_LIBRARIES)
      message(FATAL_ERROR "DO_Shakti_${COMPONENT} is missing!")
    endif ()
  elseif (NOT DO_Shakti_${COMPONENT}_RELEASE_LIBRARIES)
    message(FATAL_ERROR "DO_Shakti_${COMPONENT} is missing!")
  endif ()

  if (DO_Shakti_${COMPONENT}_LIBRARIES)
    list(APPEND DO_Shakti_LIBRARIES ${DO_Shakti_${COMPONENT}_LIBRARIES})
  endif ()

endforeach ()

# Finally add the CUDA runtime library.
list(APPEND DO_Shakti_LIBRARIES ${CUDA_CUDART_LIBRARY})



# ============================================================================ #
# List the compile flags needed by DO-Shakti.
if (SHAKTI_USE_STATIC_LIBS OR NOT SHAKTI_BUILD_SHARED_LIBS)
  add_definitions("-DDO_SHAKTI_STATIC")
endif ()



# ============================================================================ #
# Debug message.
message("DO_Shakti_LIBRARIES = ${DO_Shakti_LIBRARIES}")
